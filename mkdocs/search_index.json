{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to hook!\n\n\nhook is a RESTful, extendable Backend as a Service that provides instant backend\nto develop sites and apps faster, with dead-simple integration for iOS, Android,\nJavaScript and more.\n\n\nIt follows the same principles from \nnobackend\n, \nhoodie.js\n and \nParse\n\n\nRequirements\n: PHP 5.4+, or \nPHP 5.3\n.\n\n\nFront-end Integration Libraries\n\n\nReduce the gap between backend and frontend development:\n\n\n\n\nJavaScript\n (\ndocs\n)\n\n\nC# / Unity3D\n\n\nCorona SDK\n\n\niOS / OSX\n\n\nJava / Android\n\n\nC++\n\n\nPHP\n (\ndocs\n)\n\n\nRuby\n (\ndocs\n)\n\n\nFlash / ActionScript 3.0", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-hook", 
            "text": "hook is a RESTful, extendable Backend as a Service that provides instant backend\nto develop sites and apps faster, with dead-simple integration for iOS, Android,\nJavaScript and more.  It follows the same principles from  nobackend ,  hoodie.js  and  Parse  Requirements : PHP 5.4+, or  PHP 5.3 .", 
            "title": "Welcome to hook!"
        }, 
        {
            "location": "/#front-end-integration-libraries", 
            "text": "Reduce the gap between backend and frontend development:   JavaScript  ( docs )  C# / Unity3D  Corona SDK  iOS / OSX  Java / Android  C++  PHP  ( docs )  Ruby  ( docs )  Flash / ActionScript 3.0", 
            "title": "Front-end Integration Libraries"
        }, 
        {
            "location": "/Getting-started/How-to-use/", 
            "text": "Installation\n\n\nRun the following command in your terminal to install the latest version of\n\nhook\n and\n\nhook-cli\n:\n\n\ncurl -sSL https://raw.githubusercontent.com/doubleleft/hook/master/scripts/install.sh | bash\n\n\n\n\nLocal development server\n\n\nTo run a local development server, \ncd\n into hook directory, then run the \nserver\n command:\n\n\n$ cd ~/Projects/hook\n$ hook server\n...\nPHP 5.4.33 Development Server started at Sat Apr 11 18:51:47 2015\nListening on http://0.0.0.0:4665\nDocument root is /Users/endel/Projects/hook/public\nPress Ctrl-C to quit.\n\n\n\n\nThe default endpoint for local development server is\n\nhttp://0.0.0.0:4665\n.\n\n\nDeploying your application\n\n\nThe \ndeploy\n command will upload all your application modifications inside\n\nhook-ext\n directory, such as modules (observers, routes, templates and\nchannels), configurations (config.yaml, security.yaml, schema.yaml), packages\n(packages.yaml) and schedule (schedule.yaml).\n\n\nhook deploy\n...\nSuccessfully deployed.\n\n\n\n\nEvery change you make inside \nhook-ext\n directory needs to be deployed to\naffect the backend.\n\n\nSeeding collections\n\n\nCollection seeding is a way to define some initial contents for your\napplication's collections, such as categories, tags, etc. In this example we'll\ngenerate some dummy content for a collection called \nevents\n.\n\n\nTo generate the seed file for the collection you need, run the following\ncommand:\n\n\nhook generate:seed events\nSeed created at 'hook-ext/seeds/events.yaml'.\n\n\n\n\nYou can now edit the \nhook-ext/seeds/events.yaml\n file that was generated to\nadd your entries.\n\n\n#\n# Seed for events\n#\ntruncate: true\ndata:\n  - name: My first event\n    picture: !upload path/to/picture.jpg\n  - name: My second event\n    picture: !upload path/to/picture-2.jpg\n\n\n\n\nThings to note here:\n\n\n\n\nYou may upload files by using \n!upload\n instruction.\n\n\nBy using \ntruncate: true\n instruction, the collection will be entirely\ncleared before being seeded again.\n\n\n\n\nAfter you're done, let's seed the events collection with the following command:\n\n\nhook db:seed events\n\n\n\n\nIf you have more than one seed file, you may seed all of them once by running:\n\n\nhook db:seed\n\n\n\n\nBe careful to not truncate collections with user generated content.\n\n\nInteractive console\n\n\nThe interactive console is a tool to use the\n\njavascript\n interface with the\n\nCLI application key\n\ninteractively from your terminal.\n\n\nIt is designed for testing and debugging your application code and evaluating state.\n\n\n$ hook console\n\n\n\n\nThe console can be closed by pressing  \nCtrl+C\n twice.\n\n\nThe console has the JavaScript client instantiated by default as \nhook\n. Unlike the browser environment, every time the client tries to return a Promise, it will immediatelly be evaluated and its output will formatted and displayed.\n\n\nExample:\n\n\nclient: javascript\n hook.collection('events').count()\n2\n\n\n\n\nThe console JavaScript client also has extended permissions on hook's restricted collections:\n\n\nclient: javascript\n  hook.collection('auths').select('email').get()\n...\n\n\n\n\nGenerators\n\n\ngenerate:channel\n - Generate custom channel class.\n\n\nhook generate:channel \nchannel-name\n\n\n\n\n\ngenerate:observer\n - Generate observer class for collection events.\n\n\nhook generate:observer \ncollection-name\n\n\n\n\n\nSee \nmore about observers here\n.\n\n\ngenerate:route\n - Generate a custom route for the application.\n\n\nhook generate:route \npath\n [method=GET]\n\n\n\n\nSee \nmore about custom routes here\n.\n\n\ngenerate:schema\n - Generate schema definition config.\n\n\nhook generate:schema\n\n\n\n\nSee \nmore about schema definition here\n.\n\n\ngenerate:seed\n - Generate seed template.\n\n\nhook generate:seed \ncollection-name\n\n\n\n\n\nSee \nmore about seeding collections\nhere\n.\n\n\ngenerate:template\n - Generate an HTML template.\n\n\nhook generate:template \ntemplate-name\n\n\n\n\n\nSee \nmore about templates here\n.\n\n\nRetrieving application data\n\n\nkeys\n: List all application keys.\n\n\nhook keys\n\n\n\n\nlogs\n: Get app back-end logs.\n\n\nhook logs\n\n\n\n\nYou may specify the number of lines you want to return from logs with \n-n 1000\n\n(1000 lines)\n\n\nmodules\n: List all application modules\n\n\nhook modules\n\n\n\n\nschedule\n: List tasks scheduled for app.\n\n\nhook schedule", 
            "title": "How to use"
        }, 
        {
            "location": "/Getting-started/How-to-use/#installation", 
            "text": "Run the following command in your terminal to install the latest version of hook  and hook-cli :  curl -sSL https://raw.githubusercontent.com/doubleleft/hook/master/scripts/install.sh | bash", 
            "title": "Installation"
        }, 
        {
            "location": "/Getting-started/How-to-use/#local-development-server", 
            "text": "To run a local development server,  cd  into hook directory, then run the  server  command:  $ cd ~/Projects/hook\n$ hook server\n...\nPHP 5.4.33 Development Server started at Sat Apr 11 18:51:47 2015\nListening on http://0.0.0.0:4665\nDocument root is /Users/endel/Projects/hook/public\nPress Ctrl-C to quit.  The default endpoint for local development server is http://0.0.0.0:4665 .", 
            "title": "Local development server"
        }, 
        {
            "location": "/Getting-started/How-to-use/#deploying-your-application", 
            "text": "The  deploy  command will upload all your application modifications inside hook-ext  directory, such as modules (observers, routes, templates and\nchannels), configurations (config.yaml, security.yaml, schema.yaml), packages\n(packages.yaml) and schedule (schedule.yaml).  hook deploy\n...\nSuccessfully deployed.  Every change you make inside  hook-ext  directory needs to be deployed to\naffect the backend.", 
            "title": "Deploying your application"
        }, 
        {
            "location": "/Getting-started/How-to-use/#seeding-collections", 
            "text": "Collection seeding is a way to define some initial contents for your\napplication's collections, such as categories, tags, etc. In this example we'll\ngenerate some dummy content for a collection called  events .  To generate the seed file for the collection you need, run the following\ncommand:  hook generate:seed events\nSeed created at 'hook-ext/seeds/events.yaml'.  You can now edit the  hook-ext/seeds/events.yaml  file that was generated to\nadd your entries.  #\n# Seed for events\n#\ntruncate: true\ndata:\n  - name: My first event\n    picture: !upload path/to/picture.jpg\n  - name: My second event\n    picture: !upload path/to/picture-2.jpg  Things to note here:   You may upload files by using  !upload  instruction.  By using  truncate: true  instruction, the collection will be entirely\ncleared before being seeded again.   After you're done, let's seed the events collection with the following command:  hook db:seed events  If you have more than one seed file, you may seed all of them once by running:  hook db:seed  Be careful to not truncate collections with user generated content.", 
            "title": "Seeding collections"
        }, 
        {
            "location": "/Getting-started/How-to-use/#interactive-console", 
            "text": "The interactive console is a tool to use the javascript  interface with the CLI application key \ninteractively from your terminal.  It is designed for testing and debugging your application code and evaluating state.  $ hook console  The console can be closed by pressing   Ctrl+C  twice.  The console has the JavaScript client instantiated by default as  hook . Unlike the browser environment, every time the client tries to return a Promise, it will immediatelly be evaluated and its output will formatted and displayed.  Example:  client: javascript  hook.collection('events').count()\n2  The console JavaScript client also has extended permissions on hook's restricted collections:  client: javascript   hook.collection('auths').select('email').get()\n...", 
            "title": "Interactive console"
        }, 
        {
            "location": "/Getting-started/How-to-use/#generators", 
            "text": "generate:channel  - Generate custom channel class.  hook generate:channel  channel-name   generate:observer  - Generate observer class for collection events.  hook generate:observer  collection-name   See  more about observers here .  generate:route  - Generate a custom route for the application.  hook generate:route  path  [method=GET]  See  more about custom routes here .  generate:schema  - Generate schema definition config.  hook generate:schema  See  more about schema definition here .  generate:seed  - Generate seed template.  hook generate:seed  collection-name   See  more about seeding collections\nhere .  generate:template  - Generate an HTML template.  hook generate:template  template-name   See  more about templates here .", 
            "title": "Generators"
        }, 
        {
            "location": "/Getting-started/How-to-use/#retrieving-application-data", 
            "text": "keys : List all application keys.  hook keys  logs : Get app back-end logs.  hook logs  You may specify the number of lines you want to return from logs with  -n 1000 \n(1000 lines)  modules : List all application modules  hook modules  schedule : List tasks scheduled for app.  hook schedule", 
            "title": "Retrieving application data"
        }, 
        {
            "location": "/The-Basics/Application/", 
            "text": "Creating an application\n\n\nHaving the server \ninstalled\n locally\nor remotely, you'll need to create one application into that endpoint. Every\ncollection or configuration on hook is tied to a single application.\n\n\nTo create one, you'll need to run the following command from the commandline.\nRemember to copy the output of the command, which you'll need in near future.\n\n\nhook app:new my-hook-powered-application\n\n\n\n\nThe default endpoint is \nhttp://0.0.0.0:4665/\n, for local development. You'll\nneed to speficy \nendpoint\n option if you have installed it remotely.\n\n\nhook app:new my-hook-powered-application --endpoint http://your-server.com/\n\n\n\n\nApplication keys\n\n\nAfter running \napp:new\n command, it will output the application keys:\n\n\n$ hook app:new my-hook-powered-application\n...\nApplication: my-hook-powered-application\nKeys:\n{\n  app_id: 1\n  key: 9e48d5a6acc6006d3428e7aeef8974a1\n  type: cli\n}\n{\n  app_id: 1\n  key: ff36cf472352174365f22bc2586b8dc7\n  type: browser\n}\n{\n  app_id: 1\n  key: ecec71610a738aa9df70acbae5e9fa06\n  type: device\n}\n{\n  app_id: 1\n  key: 6c8b72e1765801c4974b95cf175a451b\n  type: server\n}\n\n\n\n\nAs you can see, there is 4 different key types here. Each of them should be\nused to perform specific tasks. Most of the time you'll need to worry just\nabout the \ncli\n and the platform you're interested in.\n\n\nApplication key: cli\n\n\nThat's your private key that have with full access to the application. It is\nimportant to never expose it, so keep it secret.\n\n\nOnly the \ncli\n application key has the ability to deploy the application, also\nany security check is skipped when you're using \nhook console\n command.\n\n\nApplication key: browser\n\n\nThe \nbrowser\n application key is targeted for web browsers, which needs\n\nCross-origin_resource_sharing\n\nheaders exposed to the client. You'll mostly use it with the\n\nhook-javascript\n client.\n\n\nBy default the server will allow any host origin to get responses using a\n\nbrowser\n application key. As your application go to production, it is\ninteresting to limit it's access to your server's origin using\n\nallowed_origins\n security configuration\n.\n\n\nApplication key: device\n\n\nTargeted for mobile devices. Only device application keys has the ability to\nregister for push notifications.\n\n\nApplication key: server\n\n\nTargeted for server-to-server communication.", 
            "title": "Application"
        }, 
        {
            "location": "/The-Basics/Application/#creating-an-application", 
            "text": "Having the server  installed  locally\nor remotely, you'll need to create one application into that endpoint. Every\ncollection or configuration on hook is tied to a single application.  To create one, you'll need to run the following command from the commandline.\nRemember to copy the output of the command, which you'll need in near future.  hook app:new my-hook-powered-application  The default endpoint is  http://0.0.0.0:4665/ , for local development. You'll\nneed to speficy  endpoint  option if you have installed it remotely.  hook app:new my-hook-powered-application --endpoint http://your-server.com/", 
            "title": "Creating an application"
        }, 
        {
            "location": "/The-Basics/Application/#application-keys", 
            "text": "After running  app:new  command, it will output the application keys:  $ hook app:new my-hook-powered-application\n...\nApplication: my-hook-powered-application\nKeys:\n{\n  app_id: 1\n  key: 9e48d5a6acc6006d3428e7aeef8974a1\n  type: cli\n}\n{\n  app_id: 1\n  key: ff36cf472352174365f22bc2586b8dc7\n  type: browser\n}\n{\n  app_id: 1\n  key: ecec71610a738aa9df70acbae5e9fa06\n  type: device\n}\n{\n  app_id: 1\n  key: 6c8b72e1765801c4974b95cf175a451b\n  type: server\n}  As you can see, there is 4 different key types here. Each of them should be\nused to perform specific tasks. Most of the time you'll need to worry just\nabout the  cli  and the platform you're interested in.  Application key: cli  That's your private key that have with full access to the application. It is\nimportant to never expose it, so keep it secret.  Only the  cli  application key has the ability to deploy the application, also\nany security check is skipped when you're using  hook console  command.  Application key: browser  The  browser  application key is targeted for web browsers, which needs Cross-origin_resource_sharing \nheaders exposed to the client. You'll mostly use it with the hook-javascript  client.  By default the server will allow any host origin to get responses using a browser  application key. As your application go to production, it is\ninteresting to limit it's access to your server's origin using allowed_origins  security configuration .  Application key: device  Targeted for mobile devices. Only device application keys has the ability to\nregister for push notifications.  Application key: server  Targeted for server-to-server communication.", 
            "title": "Application keys"
        }, 
        {
            "location": "/The-Basics/Collections/", 
            "text": "Introduction\n\n\nCollections is where you persist data.\n\n\nObservers\n\n\nWhen extending back-end code, it's possible to use any of the core dependencies.\nRead the \nAPI documentation\n for details.\n\n\n\n\nObservers can listen to collection item events, such as \ncreating\n, \ncreated\n,\n\nupdating\n, \nupdated\n, \nsaving\n, \nsaved\n, \ndeleting\n and \ndeleted\n.\n\n\nYou may cancel any \n*ing\n event by returning false, or throwing an exception.\n\n\nTo demonstrate with a real-world example, let's customize our auth Collection to\nallow only specific domain members to register in.\n\n\n$ hook generate:observer auth\nObserver created at 'hook-ext/observers/auth.php'.\n\n\n\n\n?php\n/**\n * Custom observer for: auth\n */\n\nclass Auth {\n    public function creating($model) {\n        if (strpos($model-\nemail, '@doubleleft.com') === false) {\n            throw new Exception(\nOnly doubleleft.com members can register here.\n);\n        }\n    }\n}\n\n\n\n\nLet's upload the module and test what happens.\n\n\n$ hook deploy\n\n\n\n\n$ hook console\nhook: javascript\n hook.auth.register({email: \nendel.dreyer@gmail.com\n, password: \n123\n})\nError: Only doubleleft.com members can register here.\n\nhook: javascript\n hook.auth.register({email: \nedreyer@doubleleft.com\n, password: \n123\n})\n{ email: 'edreyer@doubleleft.com',\n  updated_at: 1397149349,\n  created_at: 1397149349,\n  }\n\n\n\n\nCustom collection item's response\n\n\nIt's possible to change the default JSON response of each collection item by\noverriding the observer \ntoArray\n method. Example:\n\n\n$ hook generate:observer posts\nObserver created at 'hook-ext/observers/posts.php'.\n\n\n\n\n?php\n/**\n * Custom observer for: posts\n */\n\nclass Posts {\n    public function toArray($model, $array) {\n        if ($model-\nexpired) {\n            return array('name' =\n \nThis item was expired.\n);\n        } else {\n            return $array;\n        }\n    }\n}\n\n\n\n\nLet's upload the module and test what happens.\n\n\n$ hook module:upload\nUploading: 'hook-ext/observers/posts.php'\n\n\n\n\n$ hook console\n\nhook: javascript\n hook.collection('posts').create({title: \nHello\n, expired: false})\n{ title: 'Hello',\n  expired: false,\n  app_id: '36',\n  updated_at: 1397150195,\n  created_at: 1397150195,\n  _id: 1380 }\n\nhook: javascript\n hook.collection('posts').create({title: \nWorld\n, expired: true})\n{ name: 'This item was expired.' }\n\nhook: javascript\n hook.collection('posts').then()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 _id                      \u2502 title   \u2502 expired \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 '1380'                   \u2502 'Hello' \u2502 '0'     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 'This item was expired.'\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\nNote that every time the JSON should be retrieved, the toArray method is called.\nEven when you're creating the record.\n\n\nQuerying the database\n\n\nhook uses Laravel's Eloquent under the hood, so the way to build queries is\nthe same. The only difference on hook is that you need a Collection reference\nto start querying.\n\n\nCreating\n\n\nExample of creating a Collection item:\n\n\n$stuff = App::collection('stuff')-\ncreate([\nfoo\n =\n \nbar\n]);\n\n\n\n\nReading\n\n\nExample retrieving a Collection reference:\n\n\n$stuff = App::collection('stuff');\n\n\n\n\nExample of query:\n\n\nApp::collection('stuff')\n  -\nwhere('name', '=', 'John')\n  -\norWhere(function($query)\n  {\n      $query-\nwhere('votes', '\n', 100)\n            -\nwhere('title', '\n', 'Admin');\n  })\n  -\nget();\n\n\n\n\nUpdating\n\n\n// update all items matching a filter.\n// in this example \n$items_updated\n will receive the number of entries that has been updated.\n$items_updated = App::collection('stuff')-\nwhere(\nprop_count\n =\n 1)-\nupdate([\nfoo\n =\n \nbar\n]);\n\n// or update by _id\n$items_updated = App::collection('stuff')-\nfind(1)-\nupdate([\nfoo\n =\n \nbar\n]);\n\n\n\n\nDeleting\n\n\n// remove all items matching a filter\n$items_removed = App::collection('stuff')-\nwhere(\nvotes\n, '\n', 100)-\nremove();\n\n// remove item by _id.\n// in this example, the \nstuff\n item with _id=42 will be removed from the database.\nApp::collection('stuff')-\nremove(42);\n\n\n\n\nRead more: \nhttp://laravel.com/docs/queries\n\n(Generally you're good by replacing \nDB::table\n to \nApp::collection\n on Query\nBuilder examples.)\n\n\nSeeding collections\n\n\nSeeding is the easiest way to populate your default application's data.\n\n\nTo generate a collection seed file, run \ngenerate:seed {collection_name}\n from\ncommandline.\n\n\nhook generate:seed books\n\n\n\n\nIt will create a seed template at \nhook-ext/seeds/books.yml\n. You may\ncustomize it for your particular setup.\n\n\nThe seed file consists on two different keys:\n- \ntruncate\n - Boolean - delete all your previous data if true. (optional)\n- \ndata\n - Array - list of keys and values to be inserted into the database.\n\n\n#\n# Seed for books\n#\ntruncate: true\ndata:\n  - name: Programming PHP\n    isbn: 1449392776\n  - name: JavaScript: The Good Parts\n    isbn: 0596517742\n\n\n\n\nSee the \nYAML reference\n if you are not familiar\nwith the syntax.\n\n\nLet's really seed it into our database:\n\n\n$ hook db:seed\n...\nTruncating 'books'...\nSeeding 'books': 100%\nDone.\n\n\n\n\nYou can open up the console from commandline to check the collection's data:\n\n\n$ hook console\nhook: javascript\n hook.collection('books').then()\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 _id \u2502 name                         \u2502 isbn         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 '1' \u2502 'Programming PHP'            \u2502 '1449392776' \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 '2' \u2502 'JavaScript: The Good Parts' \u2502 '12230626'   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "Collections"
        }, 
        {
            "location": "/The-Basics/Collections/#introduction", 
            "text": "Collections is where you persist data.", 
            "title": "Introduction"
        }, 
        {
            "location": "/The-Basics/Collections/#observers", 
            "text": "When extending back-end code, it's possible to use any of the core dependencies.\nRead the  API documentation  for details.   Observers can listen to collection item events, such as  creating ,  created , updating ,  updated ,  saving ,  saved ,  deleting  and  deleted .  You may cancel any  *ing  event by returning false, or throwing an exception.  To demonstrate with a real-world example, let's customize our auth Collection to\nallow only specific domain members to register in.  $ hook generate:observer auth\nObserver created at 'hook-ext/observers/auth.php'.  ?php\n/**\n * Custom observer for: auth\n */\n\nclass Auth {\n    public function creating($model) {\n        if (strpos($model- email, '@doubleleft.com') === false) {\n            throw new Exception( Only doubleleft.com members can register here. );\n        }\n    }\n}  Let's upload the module and test what happens.  $ hook deploy  $ hook console\nhook: javascript  hook.auth.register({email:  endel.dreyer@gmail.com , password:  123 })\nError: Only doubleleft.com members can register here.\n\nhook: javascript  hook.auth.register({email:  edreyer@doubleleft.com , password:  123 })\n{ email: 'edreyer@doubleleft.com',\n  updated_at: 1397149349,\n  created_at: 1397149349,\n  }", 
            "title": "Observers"
        }, 
        {
            "location": "/The-Basics/Collections/#custom-collection-items-response", 
            "text": "It's possible to change the default JSON response of each collection item by\noverriding the observer  toArray  method. Example:  $ hook generate:observer posts\nObserver created at 'hook-ext/observers/posts.php'.  ?php\n/**\n * Custom observer for: posts\n */\n\nclass Posts {\n    public function toArray($model, $array) {\n        if ($model- expired) {\n            return array('name' =   This item was expired. );\n        } else {\n            return $array;\n        }\n    }\n}  Let's upload the module and test what happens.  $ hook module:upload\nUploading: 'hook-ext/observers/posts.php'  $ hook console\n\nhook: javascript  hook.collection('posts').create({title:  Hello , expired: false})\n{ title: 'Hello',\n  expired: false,\n  app_id: '36',\n  updated_at: 1397150195,\n  created_at: 1397150195,\n  _id: 1380 }\n\nhook: javascript  hook.collection('posts').create({title:  World , expired: true})\n{ name: 'This item was expired.' }\n\nhook: javascript  hook.collection('posts').then()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 _id                      \u2502 title   \u2502 expired \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 '1380'                   \u2502 'Hello' \u2502 '0'     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 'This item was expired.'\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Note that every time the JSON should be retrieved, the toArray method is called.\nEven when you're creating the record.", 
            "title": "Custom collection item's response"
        }, 
        {
            "location": "/The-Basics/Collections/#querying-the-database", 
            "text": "hook uses Laravel's Eloquent under the hood, so the way to build queries is\nthe same. The only difference on hook is that you need a Collection reference\nto start querying.  Creating  Example of creating a Collection item:  $stuff = App::collection('stuff')- create([ foo  =   bar ]);  Reading  Example retrieving a Collection reference:  $stuff = App::collection('stuff');  Example of query:  App::collection('stuff')\n  - where('name', '=', 'John')\n  - orWhere(function($query)\n  {\n      $query- where('votes', ' ', 100)\n            - where('title', ' ', 'Admin');\n  })\n  - get();  Updating  // update all items matching a filter.\n// in this example  $items_updated  will receive the number of entries that has been updated.\n$items_updated = App::collection('stuff')- where( prop_count  =  1)- update([ foo  =   bar ]);\n\n// or update by _id\n$items_updated = App::collection('stuff')- find(1)- update([ foo  =   bar ]);  Deleting  // remove all items matching a filter\n$items_removed = App::collection('stuff')- where( votes , ' ', 100)- remove();\n\n// remove item by _id.\n// in this example, the  stuff  item with _id=42 will be removed from the database.\nApp::collection('stuff')- remove(42);  Read more:  http://laravel.com/docs/queries \n(Generally you're good by replacing  DB::table  to  App::collection  on Query\nBuilder examples.)", 
            "title": "Querying the database"
        }, 
        {
            "location": "/The-Basics/Collections/#seeding-collections", 
            "text": "Seeding is the easiest way to populate your default application's data.  To generate a collection seed file, run  generate:seed {collection_name}  from\ncommandline.  hook generate:seed books  It will create a seed template at  hook-ext/seeds/books.yml . You may\ncustomize it for your particular setup.  The seed file consists on two different keys:\n-  truncate  - Boolean - delete all your previous data if true. (optional)\n-  data  - Array - list of keys and values to be inserted into the database.  #\n# Seed for books\n#\ntruncate: true\ndata:\n  - name: Programming PHP\n    isbn: 1449392776\n  - name: JavaScript: The Good Parts\n    isbn: 0596517742  See the  YAML reference  if you are not familiar\nwith the syntax.  Let's really seed it into our database:  $ hook db:seed\n...\nTruncating 'books'...\nSeeding 'books': 100%\nDone.  You can open up the console from commandline to check the collection's data:  $ hook console\nhook: javascript  hook.collection('books').then()\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 _id \u2502 name                         \u2502 isbn         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 '1' \u2502 'Programming PHP'            \u2502 '1449392776' \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 '2' \u2502 'JavaScript: The Good Parts' \u2502 '12230626'   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "Seeding collections"
        }, 
        {
            "location": "/The-Basics/Schema/", 
            "text": "Introduction\n\n\nhook's schema allows you to lock editing collection attributes, set relationships and define new collections.\n\n\nCollection schema\n\n\nTo generate a schema based on your current collections:\n\n\nhook generate:schema\n\n\n\n\nThe file \nhook-ext/schema.yaml\n will be created.\n\n\nNote that Hook currently doesn't support changing property/field types.\n\n\nYou can push your schema changes back to the server using the deploy command:\n\n\nhook deploy\n\n\n\n\nExample:\n\n\nbooks:\n  attributes:\n    - name: name\n      type: string\n      required: true\n    - name: price\n      type: string\n      index: true\n    - name: discount\n      type: decimal\n    - name: stock\n      type: text\n    - name: description\n      type: text\n    - name: category\n      type: text\n    - name: isbn\n      type: string\n      unique: true\n    - name: tag\n      type: enum\n      allowed: ['technology', 'science', 'it']\n      default: 'science'\n    - name: test\n      type: decimal\n      total: 10\n      places: 5\n      unique: ['tag', 'name']\n\n\n\n\nTable of supported data-types:\n\n\n\n\n\n\n\n\nData-type\n\n\nAllowed attributes\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nnone\n\n\n\n\n\n\ndate\n\n\nnone\n\n\n\n\n\n\ndate_time\n\n\nnone\n\n\n\n\n\n\ntime\n\n\nnone\n\n\n\n\n\n\ntimestamp\n\n\nnone\n\n\n\n\n\n\nbinary\n\n\nnone\n\n\n\n\n\n\ntext\n\n\nnone\n\n\n\n\n\n\nmedium_text\n\n\nnone\n\n\n\n\n\n\nlong_text\n\n\nnone\n\n\n\n\n\n\nenum\n\n\nallowed\n\n\n\n\n\n\nchar\n\n\nlength\n\n\n\n\n\n\nstring\n\n\nlength\n\n\n\n\n\n\nfloat\n\n\ntotal, places\n\n\n\n\n\n\ndouble\n\n\ntotal, places\n\n\n\n\n\n\ndecimal\n\n\ntotal, places\n\n\n\n\n\n\ninteger\n\n\nauto_increment, unsigned\n\n\n\n\n\n\nbig_integer\n\n\nauto_increment, unsigned\n\n\n\n\n\n\nmedium_integer\n\n\nauto_increment, unsigned\n\n\n\n\n\n\ntiny_integer\n\n\nauto_increment, unsigned\n\n\n\n\n\n\nsmall_integer\n\n\nauto_increment, unsigned\n\n\n\n\n\n\n\n\nCollection relationships\n\n\nrelation-type: string\n\n\nbooks:\n  relationships:\n    belongs_to: author\n\n\n\n\nrelation-type: array\n\n\nbooks:\n  relationships:\n    belongs_to:\n      - author\n      - publisher\n\n\n\n\nExamples\n\n\nauthors:\n  relationships:\n    has_many:\n      - posts\n\nposts:\n  relationships:\n    belongs_to: authors\n\nbooks:\n  belongs_to:\n    - auths\n    - author:\n        collection: auth  # defaults to 'authors' collection\n        foreign_key: # defaults to {related}_id (author_id)\n        primary_key: # defaults to '_id'\n        required: true # defaults to false, since our priority is to be as free as possible\n        on_delete: restrict # 'restrict', 'cascade' or 'none' (defaults to 'none')\n        on_update: cascade  # 'restrict', 'cascade' or 'none' (defaults to 'none')", 
            "title": "Schema"
        }, 
        {
            "location": "/The-Basics/Schema/#introduction", 
            "text": "hook's schema allows you to lock editing collection attributes, set relationships and define new collections.", 
            "title": "Introduction"
        }, 
        {
            "location": "/The-Basics/Schema/#collection-schema", 
            "text": "To generate a schema based on your current collections:  hook generate:schema  The file  hook-ext/schema.yaml  will be created.  Note that Hook currently doesn't support changing property/field types.  You can push your schema changes back to the server using the deploy command:  hook deploy  Example:  books:\n  attributes:\n    - name: name\n      type: string\n      required: true\n    - name: price\n      type: string\n      index: true\n    - name: discount\n      type: decimal\n    - name: stock\n      type: text\n    - name: description\n      type: text\n    - name: category\n      type: text\n    - name: isbn\n      type: string\n      unique: true\n    - name: tag\n      type: enum\n      allowed: ['technology', 'science', 'it']\n      default: 'science'\n    - name: test\n      type: decimal\n      total: 10\n      places: 5\n      unique: ['tag', 'name']  Table of supported data-types:     Data-type  Allowed attributes      boolean  none    date  none    date_time  none    time  none    timestamp  none    binary  none    text  none    medium_text  none    long_text  none    enum  allowed    char  length    string  length    float  total, places    double  total, places    decimal  total, places    integer  auto_increment, unsigned    big_integer  auto_increment, unsigned    medium_integer  auto_increment, unsigned    tiny_integer  auto_increment, unsigned    small_integer  auto_increment, unsigned", 
            "title": "Collection schema"
        }, 
        {
            "location": "/The-Basics/Schema/#collection-relationships", 
            "text": "relation-type: string  books:\n  relationships:\n    belongs_to: author  relation-type: array  books:\n  relationships:\n    belongs_to:\n      - author\n      - publisher", 
            "title": "Collection relationships"
        }, 
        {
            "location": "/The-Basics/Schema/#examples", 
            "text": "authors:\n  relationships:\n    has_many:\n      - posts\n\nposts:\n  relationships:\n    belongs_to: authors\n\nbooks:\n  belongs_to:\n    - auths\n    - author:\n        collection: auth  # defaults to 'authors' collection\n        foreign_key: # defaults to {related}_id (author_id)\n        primary_key: # defaults to '_id'\n        required: true # defaults to false, since our priority is to be as free as possible\n        on_delete: restrict # 'restrict', 'cascade' or 'none' (defaults to 'none')\n        on_update: cascade  # 'restrict', 'cascade' or 'none' (defaults to 'none')", 
            "title": "Examples"
        }, 
        {
            "location": "/The-Basics/Custom-routes/", 
            "text": "Custom routes\n\n\nWhen extending back-end code, it's possible to use any of the core dependencies.\nRead the \nAPI documentation\n for details.\n\n\n\n\nSometimes you need some extra work done in the server-side, such as scraping\nwebsites, accessing remote API's, etc.\n\n\n$ hook generate:route update_something\nRoute created at 'hook-ext/routes/get_update_something.php'.\n\n\n\n\nBy default, \ngenerate:route\n command will define a route using \nGET\n HTTP verb.\nYou may use another verb by providing the second argument.\n\n\nTo define a response, you must associate it into \n$app-\ncontent\n variable. It\nmust be an \narray\n, or must respond to \ntoArray\n method. The responses of custom\nroutes are always in JSON format.\n\n\n?php\n/**\n * GET /update_something\n */\nRouter::get('/update_something', function()\n{\n    return array(\nhey\n =\n \nIt works\n);\n});\n\n\n\n\nLet's upload the route and test what happens.\n\n\n$ hook deploy\nUploading: 'hook-ext/routes/get_update_something.php'\n\n\n\n\n$ hook console\nhook: javascript\n hook.get('update_something')\n{ hey: 'It works!' }", 
            "title": "Custom routes"
        }, 
        {
            "location": "/The-Basics/Custom-routes/#custom-routes", 
            "text": "When extending back-end code, it's possible to use any of the core dependencies.\nRead the  API documentation  for details.   Sometimes you need some extra work done in the server-side, such as scraping\nwebsites, accessing remote API's, etc.  $ hook generate:route update_something\nRoute created at 'hook-ext/routes/get_update_something.php'.  By default,  generate:route  command will define a route using  GET  HTTP verb.\nYou may use another verb by providing the second argument.  To define a response, you must associate it into  $app- content  variable. It\nmust be an  array , or must respond to  toArray  method. The responses of custom\nroutes are always in JSON format.  ?php\n/**\n * GET /update_something\n */\nRouter::get('/update_something', function()\n{\n    return array( hey  =   It works );\n});  Let's upload the route and test what happens.  $ hook deploy\nUploading: 'hook-ext/routes/get_update_something.php'  $ hook console\nhook: javascript  hook.get('update_something')\n{ hey: 'It works!' }", 
            "title": "Custom routes"
        }, 
        {
            "location": "/The-Basics/Templates/", 
            "text": "How to use\n\n\nTemplates may be used as email contents, or the response of \ncustom\nroutes\n. They're compiled using mustache or\nhandlebars syntax.\n\n\nGenerating a template from commandline:\n\n\nhook generate:template user_signup\n...\nTemplate created at 'hook-ext/templates/user_signup.html'.\n\n\n\n\nConsuming the template:\n\n\n$string = Module::template('user_signup.html')-\ncompile(array(\n  'name' =\n \nSomebody\n\n));\n\n\n\n\nHelpers\n\n\nString helpers\n\n\n\n\n\n\n\n\nHelper\n\n\nTemplate\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\nstr_plural\n\n\n{{ str_plural \"hook\" }}\n\n\nhooks\n\n\n\n\n\n\nstr_singular\n\n\n{{ str_singular \"hooks\" }}\n\n\nhook\n\n\n\n\n\n\nuppercase\n\n\n{{ uppercase \"hook\" }}\n\n\nHOOK\n\n\n\n\n\n\nlowercase\n\n\n{{ lowercase \"HOOK-Platform\" }}\n\n\nhook-platform\n\n\n\n\n\n\ncamel_case\n\n\n{{ camel_case \"hook_platform\" }}\n\n\nhookPlatform\n\n\n\n\n\n\nsnake_case\n\n\n{{ snake_case \"HookPlatform\" }}\n\n\nhook_platform\n\n\n\n\n\n\n\n\nMiscelaneous\n\n\nconfig\n\n\nGet a definition from \nhook-ext/config.yaml\n\n\n{{ config 'site_url' }}\n\n\n\n\ncount\n\n\nCount number of items in array.\n\n\n{{ count items }}\n\n\n\n\nURL helpers\n\n\nlink_to\n\n\nGenerate a HTML link to the given URL.\n\n\n{{ link_to \nabout\n \nAbout page\n class=\nfeatured\n }}\n\n\n\n\nform\n\n\nGenerate HTML form tag.\n\n\n{{#form method=\npost\n}}\n  {{ input \nusername\n }}\n  {{ input \npassword\n type=\npassword\n }}\n{{/form}}\n\n\n\n\nform_for\n\n\nSame as \nform\n. Plus generated field names will have a namespace. Example: \ninput name=\"item[name]\" /\n\n\n{{#form_for \nitem\n}}\n  {{ input \nname\n }}\n  {{ input type=\nsubmit\n value=\nCreate!\n }}\n{{/form}}", 
            "title": "Templates"
        }, 
        {
            "location": "/The-Basics/Templates/#how-to-use", 
            "text": "Templates may be used as email contents, or the response of  custom\nroutes . They're compiled using mustache or\nhandlebars syntax.  Generating a template from commandline:  hook generate:template user_signup\n...\nTemplate created at 'hook-ext/templates/user_signup.html'.  Consuming the template:  $string = Module::template('user_signup.html')- compile(array(\n  'name' =   Somebody \n));", 
            "title": "How to use"
        }, 
        {
            "location": "/The-Basics/Templates/#helpers", 
            "text": "", 
            "title": "Helpers"
        }, 
        {
            "location": "/The-Basics/Templates/#string-helpers", 
            "text": "Helper  Template  Output      str_plural  {{ str_plural \"hook\" }}  hooks    str_singular  {{ str_singular \"hooks\" }}  hook    uppercase  {{ uppercase \"hook\" }}  HOOK    lowercase  {{ lowercase \"HOOK-Platform\" }}  hook-platform    camel_case  {{ camel_case \"hook_platform\" }}  hookPlatform    snake_case  {{ snake_case \"HookPlatform\" }}  hook_platform", 
            "title": "String helpers"
        }, 
        {
            "location": "/The-Basics/Templates/#miscelaneous", 
            "text": "config  Get a definition from  hook-ext/config.yaml  {{ config 'site_url' }}  count  Count number of items in array.  {{ count items }}", 
            "title": "Miscelaneous"
        }, 
        {
            "location": "/The-Basics/Templates/#url-helpers", 
            "text": "link_to  Generate a HTML link to the given URL.  {{ link_to  about   About page  class= featured  }}  form  Generate HTML form tag.  {{#form method= post }}\n  {{ input  username  }}\n  {{ input  password  type= password  }}\n{{/form}}  form_for  Same as  form . Plus generated field names will have a namespace. Example:  input name=\"item[name]\" /  {{#form_for  item }}\n  {{ input  name  }}\n  {{ input type= submit  value= Create!  }}\n{{/form}}", 
            "title": "URL helpers"
        }, 
        {
            "location": "/The-Basics/Configuration/", 
            "text": "Any configuration change need your application to be deployed with the following\ncommand:\n\n\nhook deploy\n\n\n\n\nStorage providers\n\n\nWindows Azure\n\n\nWindows Azure Blob Storage config:\n\n\nstorage:\n  provider: windows_azure\n  account: account_name\n  key: secret_key_here\n  container: uploads # optional\n\n\n\n\nAdd to your \nhook-ext/packages.yaml\n:\n\n\nmicrosoft/windowsazure: 0.4.0\npear-pear.php.net/mail_mime: \n*\n\npear-pear.php.net/http_request2: \n*\n\npear-pear.php.net/mail_mimedecode: \n*\n\n\n\n\n\nAmazon AWS\n\n\nAmazon Web Services - Simple Storage Service config:\n\n\nstorage:\n  provider: amazon_aws\n  key: YOUR_AWS_KEY\n  secret: YOUR_AWS_SECRET\n  bucket: uploads\n\n\n\n\nAdd to your \nhook-ext/packages.yaml\n:\n\n\naws/aws-php-sdk: 2.7.*\n\n\n\n\nDropbox\n\n\n\n\nCreate an \nDropbox API App\n, with \"Files and Datastores\".\n\n\nGenerate your OAuth 2 access token.\n\n\n\n\nstorage:\n  provider: dropbox\n  access_token: YOUR_ACCESS_TOKEN\n\n\n\n\nAdd to your \nhook-ext/packages.yaml\n:\n\n\ndropbox/dropbox-sdk: 1.1.*\n\n\n\n\nEmail providers\n\n\nYou can change your email service provider at any time be editing your \nhook-ext/config.yaml\n's \nmail\n section.\n\n\nSupported drivers:\n\n\n\n\nmail\n (default)\n\n\nsendmail\n\n\nsmtp\n\n\nsendgrid\n (\npreset\n)\n\n\ngmail\n (\npreset\n)\n\n\namazon_ses\n (\npreset\n)\n\n\n\n\nExample with SMTP:\n\n\n# hook-ext/config.yaml\n\nmail:\n  driver: 'smtp'\n  host: 'smtp.gmail.com'\n  port: 465\n  encryption: 'ssl'\n  username: 'your-email@gmail.com'\n  password: 'your-password'\n\n\n\n\nExample with \namazon_ses\n preset:\n\n\n# hook-ext/config.yaml\n\nmail:\n  driver: amazon_ses\n  userame: user@domain.com\n  password: password123\n\n\n\n\nRelated content:\n\n- \nSending mails\n\n\nComposer packages\n\n\nYou're able to require any composer package into your project.\n\n\nEdit \nhook-ext/packages.yaml\n and add the package name and version you need.\n\n\nExample: Captcha\n\n\nAdd the external package into \nhook-ext/packages.yaml\n:\n\n\n# hook-ext/packages.yaml\ngregwar/captcha: \ndev-master\n\n\n\n\n\nCreate a custom route to output captcha image::\n\n\n$ hook generate:route catpcha\n\n\n\n\n?php\n// hook-ext/routes/get_catpcha.php\nuse Gregwar\\Captcha\\CaptchaBuilder;\n\n/**\n * GET /captcha\n */\nRouter::get('/captcha', function() {\n  $builder = new CaptchaBuilder;\n  $builder-\nbuild();\n  Response::header('Content-type', 'image/jpeg');\n  return $builder-\nget(80);\n});\n\n\n\n\nSecurity\n\n\nBy default, hook has minimal security checks to allow very fast development. As\nyou need to secure your application, some configurations will be necessary.\n\n\nallowed_origins\n\n\nA list of domains that are allowed to use JavaScript client as referrer.\n\n\n# hook-ext/security.yaml\nallowed_origins:\n  - 'mydomain.com'\n  - 'another.domain.com'\n\n\n\n\nroles\n\n\nA list of available auth roles for the application. There is two built-in roles\nare \nall\n and \nowner\n.\n\n\n# hook-ext/security.yaml\nroles:\n  - admin\n\n\n\n\ncollections\n\n\nWhich auth role can do \nread\n, \ncreate\n, \nupdate\n and \ndelete\n operations. The\nallowed arguments for each operations are \nall\n, \nowner\n and any roles you've\ndefined in the previous section.\n\n\n# hook-ext/security.yaml\ncollections:\n  events:\n    read: all     # everyone can read\n    create: owner # only the owner can create\n    update: owner # only the owner can update\n    delete: none  # nobody can delete it.\n\n\n\n\nWhen a collection operation has the \nall\n argument, there is no restriction to\nperform it.\n\n\nWhen a collection operation has the \nowner\n argument, it needs to have an\n\nauth_id\n attribute equals to the current authenticated user.\n\n\nBy default, every collection have the following configuration:\n\n\ncollections:\n  default:\n    create: 'all'\n    read: 'all'\n    update: 'owner'\n    delete: 'owner'\n\n\n\n\nTask scheduler\n\n\nScheduled tasks is a way of scheduling \ncustom routes\n to be\ncalled at a time interval.\n\n\nLet's generate a schedule template:\n\n\n$ hook generate:schedule\nSchedule configuration created at 'hook-ext/schedule.yaml'.\n\n\n\n\nOn schedule configuration, it's possible to specify intervals such as \ndaily\n,\n\nhourly\n, \nmonthly\n, \nweekly\n, or a raw crontab expression.\n\n\nThe following example configure the route \nGET /update_something\n to run every\nday.\n\n\n# hook-ext/schedule.yaml\nschedule:\n  - task: update_something\n    schedule: daily\n\n\n\n\nAfter deployng your application, the crontab will install this configuration on\nthe server.\n\n\nTo view your raw crontab schedule, use \nhook schedule\n:\n\n\n0 0 * * * curl -XGET -H 'X-App-Id: 36' -H 'X-App-Key: e12d3031809230dcb0d62086709d079e' 'http://hook.ddll.co:8280/index.php/update_something' 2\n1 /dev/null\n\n\n\n\nAdvanced crontab expressions\n\n\nSource\n\n\nFollowing are examples of crontab expressions and how they would interpreted as a recurring schedule.\n\n\n* * * * *\n\n\n\n\nThis pattern causes a task to be launched every minute.\n\n\n5 * * * *\n\n\n\n\nThis pattern causes a task to be launched once every hour and at the fifth minute of the hour (00:05, 01:05, 02:05 etc.).\n\n\n* 12 * * Mon\n\n\n\n\nThis pattern causes a task to be launched every minute during the 12th hour of Monday.\n\n\n* 12 16 * Mon\n\n\n\n\nThis pattern causes a task to be launched every minute during the 12th hour of Monday, 16th, but only if the day is the 16th of the month.\n\n\n59 11 * * 1,2,3,4,5\n\n\n\n\nThis pattern causes a task to be launched at 11:59AM on Monday, Tuesday, Wednesday, Thursday and Friday. Every sub-pattern can contain two or more comma separated values.\n\n\n59 11 * * 1-5\n\n\n\n\nThis pattern is equivalent to the previous one. Value ranges are admitted and defined using the minus character.\n\n\n*/15 9-17 * * *\n\n\n\n\nThis pattern causes a task to be launched every 15 minutes between the 9th and 17th hour of the day (9:00, 9:15, 9:30, 9:45 and so on... note that the last execution will be at 17:45). The slash character can be used to identify periodic values, in the form of a/b. A sub-pattern with the slash character is satisfied when the value on the left divided by the one on the right gives an integer result (a % b == 0).\n\n\n* 12 10-16/2 * *\n\n\n\n\nThis pattern causes a task to be launched every minute during the 12th hour of the day, but only if the day is the 10th, the 12th, the 14th or the16th of the month.\n\n\n* 12 1-15,17,20-25 * *\n\n\n\n\nThis pattern causes a task to be launched every minute during the 12th hour of the day, but the day of the month must be between the 1st and the 15th, the 20th and the 25, or at least it must be the 17th.", 
            "title": "Configuration"
        }, 
        {
            "location": "/The-Basics/Configuration/#storage-providers", 
            "text": "Windows Azure  Windows Azure Blob Storage config:  storage:\n  provider: windows_azure\n  account: account_name\n  key: secret_key_here\n  container: uploads # optional  Add to your  hook-ext/packages.yaml :  microsoft/windowsazure: 0.4.0\npear-pear.php.net/mail_mime:  * \npear-pear.php.net/http_request2:  * \npear-pear.php.net/mail_mimedecode:  *   Amazon AWS  Amazon Web Services - Simple Storage Service config:  storage:\n  provider: amazon_aws\n  key: YOUR_AWS_KEY\n  secret: YOUR_AWS_SECRET\n  bucket: uploads  Add to your  hook-ext/packages.yaml :  aws/aws-php-sdk: 2.7.*  Dropbox   Create an  Dropbox API App , with \"Files and Datastores\".  Generate your OAuth 2 access token.   storage:\n  provider: dropbox\n  access_token: YOUR_ACCESS_TOKEN  Add to your  hook-ext/packages.yaml :  dropbox/dropbox-sdk: 1.1.*", 
            "title": "Storage providers"
        }, 
        {
            "location": "/The-Basics/Configuration/#email-providers", 
            "text": "You can change your email service provider at any time be editing your  hook-ext/config.yaml 's  mail  section.  Supported drivers:   mail  (default)  sendmail  smtp  sendgrid  ( preset )  gmail  ( preset )  amazon_ses  ( preset )   Example with SMTP:  # hook-ext/config.yaml\n\nmail:\n  driver: 'smtp'\n  host: 'smtp.gmail.com'\n  port: 465\n  encryption: 'ssl'\n  username: 'your-email@gmail.com'\n  password: 'your-password'  Example with  amazon_ses  preset:  # hook-ext/config.yaml\n\nmail:\n  driver: amazon_ses\n  userame: user@domain.com\n  password: password123  Related content: \n-  Sending mails", 
            "title": "Email providers"
        }, 
        {
            "location": "/The-Basics/Configuration/#composer-packages", 
            "text": "You're able to require any composer package into your project.  Edit  hook-ext/packages.yaml  and add the package name and version you need.  Example: Captcha  Add the external package into  hook-ext/packages.yaml :  # hook-ext/packages.yaml\ngregwar/captcha:  dev-master   Create a custom route to output captcha image::  $ hook generate:route catpcha  ?php\n// hook-ext/routes/get_catpcha.php\nuse Gregwar\\Captcha\\CaptchaBuilder;\n\n/**\n * GET /captcha\n */\nRouter::get('/captcha', function() {\n  $builder = new CaptchaBuilder;\n  $builder- build();\n  Response::header('Content-type', 'image/jpeg');\n  return $builder- get(80);\n});", 
            "title": "Composer packages"
        }, 
        {
            "location": "/The-Basics/Configuration/#security", 
            "text": "By default, hook has minimal security checks to allow very fast development. As\nyou need to secure your application, some configurations will be necessary.  allowed_origins  A list of domains that are allowed to use JavaScript client as referrer.  # hook-ext/security.yaml\nallowed_origins:\n  - 'mydomain.com'\n  - 'another.domain.com'  roles  A list of available auth roles for the application. There is two built-in roles\nare  all  and  owner .  # hook-ext/security.yaml\nroles:\n  - admin  collections  Which auth role can do  read ,  create ,  update  and  delete  operations. The\nallowed arguments for each operations are  all ,  owner  and any roles you've\ndefined in the previous section.  # hook-ext/security.yaml\ncollections:\n  events:\n    read: all     # everyone can read\n    create: owner # only the owner can create\n    update: owner # only the owner can update\n    delete: none  # nobody can delete it.  When a collection operation has the  all  argument, there is no restriction to\nperform it.  When a collection operation has the  owner  argument, it needs to have an auth_id  attribute equals to the current authenticated user.  By default, every collection have the following configuration:  collections:\n  default:\n    create: 'all'\n    read: 'all'\n    update: 'owner'\n    delete: 'owner'", 
            "title": "Security"
        }, 
        {
            "location": "/The-Basics/Configuration/#task-scheduler", 
            "text": "Scheduled tasks is a way of scheduling  custom routes  to be\ncalled at a time interval.  Let's generate a schedule template:  $ hook generate:schedule\nSchedule configuration created at 'hook-ext/schedule.yaml'.  On schedule configuration, it's possible to specify intervals such as  daily , hourly ,  monthly ,  weekly , or a raw crontab expression.  The following example configure the route  GET /update_something  to run every\nday.  # hook-ext/schedule.yaml\nschedule:\n  - task: update_something\n    schedule: daily  After deployng your application, the crontab will install this configuration on\nthe server.  To view your raw crontab schedule, use  hook schedule :  0 0 * * * curl -XGET -H 'X-App-Id: 36' -H 'X-App-Key: e12d3031809230dcb0d62086709d079e' 'http://hook.ddll.co:8280/index.php/update_something' 2 1 /dev/null  Advanced crontab expressions  Source  Following are examples of crontab expressions and how they would interpreted as a recurring schedule.  * * * * *  This pattern causes a task to be launched every minute.  5 * * * *  This pattern causes a task to be launched once every hour and at the fifth minute of the hour (00:05, 01:05, 02:05 etc.).  * 12 * * Mon  This pattern causes a task to be launched every minute during the 12th hour of Monday.  * 12 16 * Mon  This pattern causes a task to be launched every minute during the 12th hour of Monday, 16th, but only if the day is the 16th of the month.  59 11 * * 1,2,3,4,5  This pattern causes a task to be launched at 11:59AM on Monday, Tuesday, Wednesday, Thursday and Friday. Every sub-pattern can contain two or more comma separated values.  59 11 * * 1-5  This pattern is equivalent to the previous one. Value ranges are admitted and defined using the minus character.  */15 9-17 * * *  This pattern causes a task to be launched every 15 minutes between the 9th and 17th hour of the day (9:00, 9:15, 9:30, 9:45 and so on... note that the last execution will be at 17:45). The slash character can be used to identify periodic values, in the form of a/b. A sub-pattern with the slash character is satisfied when the value on the left divided by the one on the right gives an integer result (a % b == 0).  * 12 10-16/2 * *  This pattern causes a task to be launched every minute during the 12th hour of the day, but only if the day is the 10th, the 12th, the 14th or the16th of the month.  * 12 1-15,17,20-25 * *  This pattern causes a task to be launched every minute during the 12th hour of the day, but the day of the month must be between the 1st and the 15th, the 20th and the 25, or at least it must be the 17th.", 
            "title": "Task scheduler"
        }, 
        {
            "location": "/The-Basics/Logging/", 
            "text": "Logging\n\n\nYou can log custom messages using the following commands:\n\n\nLogger::log(\nmessage\n); // Which defaults to INFO level\nLogger::debug(\nmessage\n);\nLogger::info(\nmessage\n);\nLogger::warn(\nmessage\n);\nLogger::error(\nmessage\n);\n\n\n\n\nAll logs will be written to a text file, which you can read by running:\n\n\nhook logs\n\n\n\n\nYou can also ask for a larger number of lines by adding an additional parameter:\n\n\nhook logs -n 1000", 
            "title": "Logging"
        }, 
        {
            "location": "/The-Basics/Logging/#logging", 
            "text": "You can log custom messages using the following commands:  Logger::log( message ); // Which defaults to INFO level\nLogger::debug( message );\nLogger::info( message );\nLogger::warn( message );\nLogger::error( message );  All logs will be written to a text file, which you can read by running:  hook logs  You can also ask for a larger number of lines by adding an additional parameter:  hook logs -n 1000", 
            "title": "Logging"
        }, 
        {
            "location": "/More/Deployment/", 
            "text": "Heroku\n\n\ngit clone git@github.com:doubleleft/hook.git\ncd hook\n\n\n\n\nCreate an heroku app using a custom buildpack. (Thanks to \n@CHH\n)\n\n\nheroku create myapp --buildpack https://github.com/CHH/heroku-buildpack-php\n\n\n\n\nConfigure git remote to heroku endpoint.\n\n\ngit remote add heroku git@heroku.com:myapp.git\ngit push heroku master\n\n\n\n\nThe buildpack will install nginx, php, php-fpm, and run \ncomposer install\n\nautomatically. When it finishes it's already possible to hack on using\nhttp://myapp.herokuapp.com as your hook endpoint.\n\n\nBy default hook uses SQLite. You can pick any database add-on available on\nHeroku to use, such as \ncleardb\n (MySQL).\nLet's do this:\n\n\nheroku addons:add cleardb\n\n\n\n\nRun \nheroku config\n and check out the \nCLEARDB_DATABASE_URL\n variable. Let's\nextract database variables from there and edit our \napp/config/database.php\n\nfile.\n\n\n?php\n// config/database.php\nreturn array(\n    'driver'   =\n 'mysql',\n    'host'     =\n 'us-cdbr-east-04.cleardb.net',\n    'username' =\n 'b2fe300440300f',\n    'password' =\n 'a7440e49',\n    'database' =\n 'heroku_b4270320d92f20f',\n    'collation' =\n 'utf8_general_ci',\n    'charset' =\n 'utf8'\n);\n\n\n\n\nPush it again, and you are ready to go.\n\n\nOpenShift\n\n\ngit clone git@github.com:doubleleft/hook.git\ncd hook\n\n\n\n\nCreate a PHP-5.4 app from \nOpenShift console\n\n\ngit remote add openshift ssh://53791a514382ec417500014f@php-dlapi.rhcloud.com/~/git/php.git/\n\n\n\n\nCreate a deployment hook to install \ncomposer\n dependencies.\n\n\nmkdir -p .openshift/action_hooks\n\n\n\n\nDeployment hook file: \n.openshift/action_hooks/deploy\n (needs \nchmod +x\n)\n\n\n#!/bin/bash\n# Credits: http://stanlemon.net/2013/03/22/composer-on-openshift/\n\nexport COMPOSER_HOME=\n$OPENSHIFT_DATA_DIR/.composer\n\n\nif [ ! -f \n$OPENSHIFT_DATA_DIR/composer.phar\n ]; then\n    curl -s https://getcomposer.org/installer | php -- --install-dir=$OPENSHIFT_DATA_DIR\nelse\n  php $OPENSHIFT_DATA_DIR/composer.phar self-update\nfi\n\n( unset GIT_DIR ; cd $OPENSHIFT_REPO_DIR ; php $OPENSHIFT_DATA_DIR/composer.phar install )\n\n\n\n\nPush your application to deploy:\n\n\n$ git push openshift master\n\n\n\n\nLive demo: \nhttp://php-dlapi.rhcloud.com/\n\n\nGoogle App Engine\n\n\nIt seems possible, but kinda hacky.\n\n\nReference for further deep look:\n- http://blog.neoxia.com/laravel-4-on-google-appengine-for-php/\n- https://gae-php-tips.appspot.com/2013/10/22/getting-started-with-laravel-on-php-for-app-engine/\n- \nPatched MySqlConnector\n\n\nWeb Sockets\n\n\nFor the websocket itself:\n\n\nphp socket/server.php\n\n\n\n\nAnd you may also need to setup a socket policy server:\n\n\nperl -Tw socket/flash_socketpolicy.pl\n\n\n\n\nIts set to listen on port 8430 in order to be able to run it as an unprivileged user, but as the script needs to bind in port 843 we can forward ports.\n\n\nWith iptables we can apply the following rule (of curse with \nsudo\n or as \nroot\n user):\n\n\nsudo iptables -t nat -A PREROUTING -p tcp --dport 843 -j REDIRECT --to-port 8430\n\n\n\n\nOr with ipfw on Mac OS X:\n\n\nsudo ipfw add 100 fwd 127.0.0.1,8430 tcp from any to me 843 in\n\n\n\n\nServer Configuration\n\n\nApache\n\n\nYou may need to add the following snippet in your Apache HTTP server virtual host configuration or \n.htaccess\n file.\n\n\nRewriteEngine on\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond $1 !^(index\\.php)\nRewriteRule ^(.*)$ /index.php/$1 [L]\n\n\n\n\nAlternatively, if you\u2019re lucky enough to be using a version of Apache greater than 2.2.15, then you can instead just use this one, single line:\n\n\nFallbackResource /index.php\n\n\n\n\nNginx\n\n\nUnder the \nserver\n block of your virtual host configuration, you only need to add three lines.\n\n\nlocation / {\n  try_files $uri $uri/ /index.php?$query_string;\n}\n\n\n\n\nIIS\n\n\nFor IIS you will need to install URL Rewrite for IIS and then add the following rule to your \nweb.config\n:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfiguration\n\n    \nsystem.webServer\n\n        \nrewrite\n\n            \nrules\n\n                \nrule name=\nHook\n stopProcessing=\ntrue\n\n                    \nmatch url=\n^(.*)$\n /\n\n                    \nconditions logicalGrouping=\nMatchAll\n\n                        \nadd input=\n{REQUEST_FILENAME}\n matchType=\nIsFile\n negate=\ntrue\n /\n\n                        \nadd input=\n{REQUEST_FILENAME}\n matchType=\nIsDirectory\n negate=\ntrue\n /\n\n                    \n/conditions\n\n                    \naction type=\nRewrite\n url=\nindex.php/{R:1}\n /\n\n                \n/rule\n\n            \n/rules\n\n        \n/rewrite\n\n    \n/system.webServer\n\n\n/configuration\n\n\n\n\n\nVagrant / Saltstack\n\n\nClone \ndoubleleft/hook\n repository, in your \n/Projects\n dir and cd into it.\n\n\nHave a look in Vagrantfile and customize it for your needs.\n\n\nType:\n\n\nvagrant up\n\n\n\n\nIn order to deploy in a production server with \nSaltstack\n, make sure you already have Salt installed. You can install it like this:\n\n\ncurl -L https://bootstrap.saltstack.com | sudo sh\n\n\n\n\nOur salt formula accept some parameters. By default it should work out of the box in a Vagrant environment. The default values are setup like this:\n\n\nproject_path: /vagrant\nproject_username: vagrant\nproj_name: myproject\ndomain_name: localhost\n\n\n\n\nIf deploying through command line, you can customize this values like this:\n\n\ncd your/directory/root/project\nsudo salt-call -c salt state.highstate pillar='{project_path: your/directory/root/path, project_username: your-ssh-username, proj_name: hook, domain_name: hook.mydomain.com}'\n\n\n\n\nIf you are deploying inside vagrant itself through \nvagrant-linode\n, \nvagrant-digitalocean\n or \nvagrant-aws\n for example, you could fill the salt pillar arguments right into \nVagrantfile\n, like this, for ex:\n\n\n  config.vm.provision :salt do |salt|\n    salt.minion_config = \nsalt/minion\n\n    salt.run_highstate = true\n    salt.colorize = true\n    salt.pillar({\n      \nproject_path\n =\n \n/srv/www/hook\n,\n      \nproject_username\n =\n \nubuntu\n,\n      \nproj_name\n =\n \nhook\n,\n      \ndomain_name\n =\n \nhook.mydomain.com\n\n    })\n  end\n\n\n\n\nDeploying on PHP 5.3\n\n\nIt's possible to downgrade hook's code to support PHP 5.3 version using \nphp-code-downgrade\n tool.\n\n\n\n\nDownload and install hook:\n\n\n\n\ngit clone https://github.com/doubleleft/hook.git\ncd hook\ncomposer install\ncd ../\n\n\n\n\n\n\nInstall the tool in your build server:\n\n\n\n\ngit clone https://github.com/endel/php-code-downgrade.git\ncd php-code-downgrade\ncomposer install\n\n\n\n\n\n\nRun the tool against hook directory to downgrade it's core and vendor features to 5.3. It's important that you have run \ncomposer install\n to install hook's dependencies before this step.\n\n\n\n\n./php-code-downgrade ../hook\n\n\n\n\nYou're ready to rock on PHP5.3 servers.", 
            "title": "Deployment"
        }, 
        {
            "location": "/More/Deployment/#heroku", 
            "text": "git clone git@github.com:doubleleft/hook.git\ncd hook  Create an heroku app using a custom buildpack. (Thanks to  @CHH )  heroku create myapp --buildpack https://github.com/CHH/heroku-buildpack-php  Configure git remote to heroku endpoint.  git remote add heroku git@heroku.com:myapp.git\ngit push heroku master  The buildpack will install nginx, php, php-fpm, and run  composer install \nautomatically. When it finishes it's already possible to hack on using\nhttp://myapp.herokuapp.com as your hook endpoint.  By default hook uses SQLite. You can pick any database add-on available on\nHeroku to use, such as  cleardb  (MySQL).\nLet's do this:  heroku addons:add cleardb  Run  heroku config  and check out the  CLEARDB_DATABASE_URL  variable. Let's\nextract database variables from there and edit our  app/config/database.php \nfile.  ?php\n// config/database.php\nreturn array(\n    'driver'   =  'mysql',\n    'host'     =  'us-cdbr-east-04.cleardb.net',\n    'username' =  'b2fe300440300f',\n    'password' =  'a7440e49',\n    'database' =  'heroku_b4270320d92f20f',\n    'collation' =  'utf8_general_ci',\n    'charset' =  'utf8'\n);  Push it again, and you are ready to go.", 
            "title": "Heroku"
        }, 
        {
            "location": "/More/Deployment/#openshift", 
            "text": "git clone git@github.com:doubleleft/hook.git\ncd hook  Create a PHP-5.4 app from  OpenShift console  git remote add openshift ssh://53791a514382ec417500014f@php-dlapi.rhcloud.com/~/git/php.git/  Create a deployment hook to install  composer  dependencies.  mkdir -p .openshift/action_hooks  Deployment hook file:  .openshift/action_hooks/deploy  (needs  chmod +x )  #!/bin/bash\n# Credits: http://stanlemon.net/2013/03/22/composer-on-openshift/\n\nexport COMPOSER_HOME= $OPENSHIFT_DATA_DIR/.composer \n\nif [ ! -f  $OPENSHIFT_DATA_DIR/composer.phar  ]; then\n    curl -s https://getcomposer.org/installer | php -- --install-dir=$OPENSHIFT_DATA_DIR\nelse\n  php $OPENSHIFT_DATA_DIR/composer.phar self-update\nfi\n\n( unset GIT_DIR ; cd $OPENSHIFT_REPO_DIR ; php $OPENSHIFT_DATA_DIR/composer.phar install )  Push your application to deploy:  $ git push openshift master  Live demo:  http://php-dlapi.rhcloud.com/", 
            "title": "OpenShift"
        }, 
        {
            "location": "/More/Deployment/#google-app-engine", 
            "text": "It seems possible, but kinda hacky.  Reference for further deep look:\n- http://blog.neoxia.com/laravel-4-on-google-appengine-for-php/\n- https://gae-php-tips.appspot.com/2013/10/22/getting-started-with-laravel-on-php-for-app-engine/\n-  Patched MySqlConnector", 
            "title": "Google App Engine"
        }, 
        {
            "location": "/More/Deployment/#web-sockets", 
            "text": "For the websocket itself:  php socket/server.php  And you may also need to setup a socket policy server:  perl -Tw socket/flash_socketpolicy.pl  Its set to listen on port 8430 in order to be able to run it as an unprivileged user, but as the script needs to bind in port 843 we can forward ports.  With iptables we can apply the following rule (of curse with  sudo  or as  root  user):  sudo iptables -t nat -A PREROUTING -p tcp --dport 843 -j REDIRECT --to-port 8430  Or with ipfw on Mac OS X:  sudo ipfw add 100 fwd 127.0.0.1,8430 tcp from any to me 843 in", 
            "title": "Web Sockets"
        }, 
        {
            "location": "/More/Deployment/#server-configuration", 
            "text": "Apache  You may need to add the following snippet in your Apache HTTP server virtual host configuration or  .htaccess  file.  RewriteEngine on\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond $1 !^(index\\.php)\nRewriteRule ^(.*)$ /index.php/$1 [L]  Alternatively, if you\u2019re lucky enough to be using a version of Apache greater than 2.2.15, then you can instead just use this one, single line:  FallbackResource /index.php  Nginx  Under the  server  block of your virtual host configuration, you only need to add three lines.  location / {\n  try_files $uri $uri/ /index.php?$query_string;\n}  IIS  For IIS you will need to install URL Rewrite for IIS and then add the following rule to your  web.config :  ?xml version= 1.0  encoding= UTF-8 ?  configuration \n     system.webServer \n         rewrite \n             rules \n                 rule name= Hook  stopProcessing= true \n                     match url= ^(.*)$  / \n                     conditions logicalGrouping= MatchAll \n                         add input= {REQUEST_FILENAME}  matchType= IsFile  negate= true  / \n                         add input= {REQUEST_FILENAME}  matchType= IsDirectory  negate= true  / \n                     /conditions \n                     action type= Rewrite  url= index.php/{R:1}  / \n                 /rule \n             /rules \n         /rewrite \n     /system.webServer  /configuration", 
            "title": "Server Configuration"
        }, 
        {
            "location": "/More/Deployment/#vagrant-saltstack", 
            "text": "Clone  doubleleft/hook  repository, in your  /Projects  dir and cd into it.  Have a look in Vagrantfile and customize it for your needs.  Type:  vagrant up  In order to deploy in a production server with  Saltstack , make sure you already have Salt installed. You can install it like this:  curl -L https://bootstrap.saltstack.com | sudo sh  Our salt formula accept some parameters. By default it should work out of the box in a Vagrant environment. The default values are setup like this:  project_path: /vagrant\nproject_username: vagrant\nproj_name: myproject\ndomain_name: localhost  If deploying through command line, you can customize this values like this:  cd your/directory/root/project\nsudo salt-call -c salt state.highstate pillar='{project_path: your/directory/root/path, project_username: your-ssh-username, proj_name: hook, domain_name: hook.mydomain.com}'  If you are deploying inside vagrant itself through  vagrant-linode ,  vagrant-digitalocean  or  vagrant-aws  for example, you could fill the salt pillar arguments right into  Vagrantfile , like this, for ex:    config.vm.provision :salt do |salt|\n    salt.minion_config =  salt/minion \n    salt.run_highstate = true\n    salt.colorize = true\n    salt.pillar({\n       project_path  =   /srv/www/hook ,\n       project_username  =   ubuntu ,\n       proj_name  =   hook ,\n       domain_name  =   hook.mydomain.com \n    })\n  end", 
            "title": "Vagrant / Saltstack"
        }, 
        {
            "location": "/More/Deployment/#deploying-on-php-53", 
            "text": "It's possible to downgrade hook's code to support PHP 5.3 version using  php-code-downgrade  tool.   Download and install hook:   git clone https://github.com/doubleleft/hook.git\ncd hook\ncomposer install\ncd ../   Install the tool in your build server:   git clone https://github.com/endel/php-code-downgrade.git\ncd php-code-downgrade\ncomposer install   Run the tool against hook directory to downgrade it's core and vendor features to 5.3. It's important that you have run  composer install  to install hook's dependencies before this step.   ./php-code-downgrade ../hook  You're ready to rock on PHP5.3 servers.", 
            "title": "Deploying on PHP 5.3"
        }, 
        {
            "location": "/Tutorials/OAuth-integration/", 
            "text": "# hook-ext/config.yaml\noauth:\n  Twitter:\n    key: 'twitter_key'\n    secret: 'twitter_secret'\n  Facebook:\n    app_id: 'facebook_app_id'\n    app_secret: 'facebook_app_secret'\n  Google:\n    client_id: 'google_client_id'\n    client_secret: 'google_client_secret'\n\n\n\n\n# hook-ext/packages.yaml\nopauth/opauth: \ndev-master\n\nopauth/twitter: \ndev-master\n\nopauth/facebook: \ndev-master\n\nopauth/google: \ndev-master\n\n\n\n\n\nhook deploy\n\n\n\n\nRequire the \nOAuth plugin\n in your webapp and use the following code to login:\n\n\nvar hook = new Hook.Client({...});\nhook.oauth.popup('facebook').then(function(data) {\n  console.log(\nLogged in:\n, data.first_name);\n}).otherwise(function(error){\n  console.log(\nError\n, error);\n});", 
            "title": "OAuth integration"
        }, 
        {
            "location": "/Tutorials/Score-ranking/", 
            "text": "Get User position on ranking\n\n\nvar userCurrentScore = 1500;\nhook.collection('users').where('score','\n',userCurrentScore).count(function(position){\n    console.log(position);\n});\n\n\n\n\nGet Facebook friends ranking\n\n\nvar fql = \nSELECT uid FROM user WHERE is_app_user=1 AND uid IN (SELECT uid2 FROM friend WHERE uid1 = me())\n;\nFB.api({method: 'fql.query', query:fql}, function(data){\n    if(data == null){\n        return;\n    }\n    var friends_ids = [];\n    for(var i = 0; i\ndata.length; i++){\n        friends_ids.push(data[i].uid);\n    }\n    hook.collection('auth').where('facebook_id', 'in', friends_ids).then(function(response){\n        console.log(response);\n    });\n});", 
            "title": "Score ranking"
        }, 
        {
            "location": "/Tutorials/Score-ranking/#get-user-position-on-ranking", 
            "text": "var userCurrentScore = 1500;\nhook.collection('users').where('score',' ',userCurrentScore).count(function(position){\n    console.log(position);\n});", 
            "title": "Get User position on ranking"
        }, 
        {
            "location": "/Tutorials/Score-ranking/#get-facebook-friends-ranking", 
            "text": "var fql =  SELECT uid FROM user WHERE is_app_user=1 AND uid IN (SELECT uid2 FROM friend WHERE uid1 = me()) ;\nFB.api({method: 'fql.query', query:fql}, function(data){\n    if(data == null){\n        return;\n    }\n    var friends_ids = [];\n    for(var i = 0; i data.length; i++){\n        friends_ids.push(data[i].uid);\n    }\n    hook.collection('auth').where('facebook_id', 'in', friends_ids).then(function(response){\n        console.log(response);\n    });\n});", 
            "title": "Get Facebook friends ranking"
        }, 
        {
            "location": "/Tutorials/Sending-mails/", 
            "text": "Sending emails\n\n\nMail::send(array(\n  'body' =\n Module::template(\nHey {{name}}\n)-\ncompile(array(\nname\n =\n \nYour name\n)),\n  'subject' =\n \nEmail subject\n,\n  'to' =\n \nto@domain.com\n,\n  'from' =\n \nfrom@domain.com\n\n));\n\n\n\n\nTesting SMTP\n\n\n$ hook config:set mail.driver=gmail mail.username=dl.tools.sendmail@gmail.com mail.password=VU7SOy3ne0hz\n\n\n\n\nFor configuring other providers to send email, see \nEmail providers", 
            "title": "Sending mails"
        }
    ]
}